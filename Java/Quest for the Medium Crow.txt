import java.util.*;
public class MedianOfTwoSortedArrays {
    public static double findMedianSortedArrays(int[] nums1, int[] nums2){
        int m = nums1.length, n = nums2.length;
        if (m > n) {
            return findMedianSortedArrays(nums2, nums1);
        }
        
        int low = 0, high = m, medianPos = (m + n + 1) / 2;
        while (low <= high) {
            int partitionA = (low + high) / 2;
            int partitionB = medianPos - partitionA;
            int maxLeftA = (partitionA == 0) ? Integer.MIN_VALUE : nums1[partitionA - 1];
            int minRightA = (partitionA == m) ? Integer.MAX_VALUE : nums1[partitionA];
            int maxLeftB = (partitionB == 0) ? Integer.MIN_VALUE : nums2[partitionB - 1];
            int minRightB = (partitionB == n) ? Integer.MAX_VALUE : nums2[partitionB];
            if (maxLeftA <= minRightB && maxLeftB <= minRightA) {
                if ((m + n) % 2 == 0) {
                    return (Math.max(maxLeftA, maxLeftB) + Math.min(minRightA, minRightB)) / 2.0;
                } else {
                    return Math.max(maxLeftA, maxLeftB);
                }
            } else if (maxLeftA > minRightB) {
                high = partitionA - 1;
            } else {
                low = partitionA + 1;
            }
        }
        throw new IllegalArgumentException("Input arrays are not sorted properly");
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        String line1 = scanner.nextLine();
        String line2 = scanner.nextLine();
        
        int[] nums1 = Arrays.stream(line1.split(" ")).mapToInt(Integer::parseInt).toArray();
        int[] nums2 = Arrays.stream(line2.split(" ")).mapToInt(Integer::parseInt).toArray();
        List<Integer> mergedList = new ArrayList<>();
        int i = 0, j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] < nums2[j]) {
                mergedList.add(nums1[i++]);
            } else {
                mergedList.add(nums2[j++]);
            }
        }
        while (i < nums1.length) mergedList.add(nums1[i++]);
        while (j < nums2.length) mergedList.add(nums2[j++]);
        
        System.out.println(mergedList + "," + findMedianSortedArrays(nums1, nums2));
        scanner.close();
    }
}
