import java.util.*;

public class TreasureHunt {
    private static int[] findStartAndExit(char[][] grid) {
        int[] start = new int[2];
        int[] exit = new int[2];
        boolean foundStart = false;
        boolean foundExit = false;

        for (int r = 0; r < grid.length; r++) {
            for (int c = 0; c < grid[r].length; c++) {
                if (grid[r][c] == 'S') {
                    start[0] = r;
                    start[1] = c;
                    foundStart = true;
                } else if (grid[r][c] == 'E') {
                    exit[0] = r;
                    exit[1] = c;
                    foundExit = true;
                }
            }
        }

        return foundStart && foundExit ? new int[]{start[0], start[1], exit[0], exit[1]} : null;
    }
    private static boolean isValidMove(char[][] grid, boolean[][] visited, int row, int col) {
        return (row >= 0 && row < grid.length && col >= 0 && col < grid[0].length &&
                grid[row][col] != '#' && !visited[row][col]);
    }
    private static boolean dfs(char[][] grid, boolean[][] visited, int row, int col, int[] exit) {
        if (row == exit[0] && col == exit[1]) {
            return true;
        }
        visited[row][col] = true;
        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        for (int[] dir : directions) {
            int newRow = row + dir[0];
            int newCol = col + dir[1];
            if (isValidMove(grid, visited, newRow, newCol)) {
                if (dfs(grid, visited, newRow, newCol, exit)) {
                    return true;
                }
            }
        }

        return false;
    }

    private static boolean pathExists(char[][] grid) {
        int[] startAndExit = findStartAndExit(grid);
        if (startAndExit == null) {
            return false;
        }

        int[] start = {startAndExit[0], startAndExit[1]};
        int[] exit = {startAndExit[2], startAndExit[3]};
        boolean[][] visited = new boolean[grid.length][grid[0].length];

        return dfs(grid, visited, start[0], start[1], exit);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<char[]> gridList = new ArrayList<>();

        // Read the grid input
        while (true) {
            String line = scanner.nextLine().trim();
            if (line.equals("done")) {
                break;
            }
            gridList.add(line.replace(" ", "").toCharArray());
        }
        char[][] grid = new char[gridList.size()][];
        for (int i = 0; i < gridList.size(); i++) {
            grid[i] = gridList.get(i);
        }

        if (pathExists(grid)) {
            System.out.println("Path Found");
        } else {
            System.out.println("No Path Found");
        }

        scanner.close();
    }
}